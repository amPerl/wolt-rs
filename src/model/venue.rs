use super::*;
use serde::Deserialize;

#[derive(Deserialize, Debug)]
#[serde(tag = "type")]
pub enum OpeningEvent {
    #[serde(rename = "open")]
    Open { value: Date },
    #[serde(rename = "close")]
    Close { value: Date },
}

#[derive(Deserialize, Debug)]
pub struct OpeningTimes {
    pub monday: Option<Vec<OpeningEvent>>,
    pub tuesday: Option<Vec<OpeningEvent>>,
    pub wednesday: Option<Vec<OpeningEvent>>,
    pub thursday: Option<Vec<OpeningEvent>>,
    pub friday: Option<Vec<OpeningEvent>>,
    pub saturday: Option<Vec<OpeningEvent>>,
    pub sunday: Option<Vec<OpeningEvent>>,
}

#[derive(Deserialize, Debug)]
pub struct CompletionEstimates {
    pub delivery: String,
    pub delivery_rush: String,
    pub normal: String,
    pub order_estimates_in_use: bool,
    pub rush: String,
}

#[derive(Deserialize, Debug)]
pub struct Rush {
    pub queue_minutes: bool,
    pub status: bool,
}

#[derive(Deserialize, Debug)]
pub struct Tag {}

#[derive(Deserialize, Debug)]
pub struct EggTimers {
    pub delivery: i32,
    pub eatin: i32,
    pub takeaway: i32,
}

#[derive(Deserialize, Debug)]
#[serde(tag = "type")]
pub enum GeoRange {
    Polygon { coordinates: Vec<Vec<(f64, f64)>> },
}

#[derive(Deserialize, Debug)]
pub struct PricingRange {
    pub a: i32,
    pub b: f64,
    pub max: i32,
    pub min: i32,
}

#[derive(Deserialize, Debug)]
pub struct DeliveryPricing {
    pub base_price: i32,
    pub distance_ranges: Vec<PricingRange>,
    pub price_multiplier: f64,
    pub price_ranges: Vec<PricingRange>,
    pub tax: f64,

    #[serde(flatten)]
    pub _extra_fields: std::collections::HashMap<String, serde_json::Value>,
}

#[derive(Deserialize, Debug)]
pub struct DeliverySpecsPrice {
    pub tax: f64,
}

#[derive(Deserialize, Debug)]
pub struct ServiceTime {
    pub bike: i32,
    pub car: i32,
}

#[derive(Deserialize, Debug)]
pub struct CapabilityValue {
    pub capability: String,
    pub penalty_class: String,
}

#[derive(Deserialize, Debug)]
pub struct DeliverySpecs {
    pub courier_restrictions: i32,
    pub delivery_enabled: bool,
    pub delivery_pricing: DeliveryPricing,
    pub delivery_times: OpeningTimes,
    pub geo_range: GeoRange,
    pub postcode_range: Vec<String>,
    pub price: DeliverySpecsPrice,
    pub require_street_address: bool,
    pub required_capabilities: Vec<String>,
    pub road_range_mode: String,
    pub service_time: ServiceTime,
    pub use_default_autogenerated_geo_range: bool,
    pub use_default_delivery_pricing: bool,
    pub forbidden_capabilities: Option<Vec<String>>,
    pub capability_values: Option<Vec<CapabilityValue>>,
    pub custom_geo_range: Option<GeoRange>,
    pub road_range: Option<i32>,

    #[serde(flatten)]
    pub _extra_fields: std::collections::HashMap<String, serde_json::Value>,
}

#[derive(Deserialize, Debug)]
pub struct Rating {
    pub negative_percentage: i32,
    pub neutral_percentage: i32,
    pub positive_percentage: i32,
    pub rating: i32,
    pub score: f64,
    pub text: String,
    pub volume: i32,
}

#[derive(Deserialize, Debug)]
pub struct OpeningTimesMessage {
    pub message: Vec<LocalizedString>,
    pub until: Date,
}

#[derive(Deserialize, Debug)]
pub struct OfflinePeriod {
    pub end: Date,
}

#[derive(Deserialize, Debug)]
pub struct Venue {
    pub id: ObjectReference,
    pub delivery_methods: Vec<String>,
    pub bank_account_type: String,
    pub comment_disabled: bool,
    pub group_order_enabled: bool,
    pub short_description: Vec<LocalizedString>,
    pub country: String,
    pub r#type: String,
    pub always_available: bool,
    pub food_tags: Vec<String>,
    pub itemid: ObjectReference,
    pub opening_times: OpeningTimes,
    pub description: Vec<LocalizedString>,
    pub wolt_delivery: bool,
    pub allowed_payment_methods: Vec<String>,
    pub relevancy: f64,
    pub show_delivery_info_on_merchant: bool,
    pub preorder_times: OpeningTimes,
    pub ratings_and_reviews_enabled: bool,
    pub show_delivery_price_on_merchant: bool,
    pub alive: i32,
    pub public_visible: bool,
    pub merchant: ObjectReference,
    pub post_code: String,
    pub show_allergy_disclaimer_on_menu: bool,
    pub slug: String,
    pub mainimage: String,
    pub status: String,
    pub city: String,
    pub completion_estimates: CompletionEstimates,
    pub customer_support_phone: String,
    pub preorder_enabled: bool,
    pub rush: Rush,
    pub show_phone_number_on_merchant: bool,
    pub timezone_name: String,
    pub online: bool,
    pub timezone: String,
    pub menu_layout: String,
    pub name: Vec<LocalizedString>,
    pub mainimage_blurhash: String,
    pub tags: Vec<Tag>,
    pub estimates: Estimates,
    pub currency: String,
    pub delivery_specs: DeliverySpecs,
    pub price_range: i32,
    pub favourite: bool,
    pub listimage_blurhash: String,
    pub address: String,
    pub relevancy_from_purchases: f64,
    pub presence: String,
    pub product_line: String,
    pub listimage: String,
    pub public_url: String,
    pub active_menu: ObjectReference,
    pub location: Location,
    pub offline_period: Option<OfflinePeriod>,
    pub opening_times_message: Option<OpeningTimesMessage>,
    pub high_volume_venue: Option<bool>,
    pub rating: Option<Rating>,
    pub dropoff_note_prefix: Option<String>,
    pub phone: Option<String>,
    pub preorder_only: Option<bool>,
    pub franchise: Option<String>,
    pub website: Option<String>,
    pub tag_text: Option<String>,
    pub egg_timers: Option<EggTimers>,
    pub b2b_recommended: Option<bool>,
    pub bank_routing_code: Option<String>,
    pub substitutions_enabled: Option<bool>,

    #[serde(flatten)]
    pub _extra_fields: std::collections::HashMap<String, serde_json::Value>,
}

#[derive(Deserialize, Debug)]
pub struct VenueResults {
    pub status: String,
    pub results: Option<Vec<Venue>>,

    #[serde(flatten)]
    pub _extra_fields: std::collections::HashMap<String, serde_json::Value>,
}
